name: TenderPulse CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tenderpulse_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .
        pip install pytest pytest-asyncio pytest-cov httpx
        
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenderpulse_test
      run: |
        python -m alembic upgrade head
        
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenderpulse_test
        ENVIRONMENT: test
        ENABLE_CONNECTORS: TED
        SHADOW_CONNECTORS: ""
      run: |
        python -m pytest backend/app/tests/ -v --cov=backend/app --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
        pip install .
        
    - name: Run Black
      run: black --check backend/
      
    - name: Run isort
      run: isort --check-only backend/
      
    - name: Run flake8
      run: flake8 backend/
      
    - name: Run mypy
      run: mypy backend/app/

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run linter
      working-directory: frontend
      run: npm run lint
      
    - name: Run type check
      working-directory: frontend
      run: npm run type-check || npx tsc --noEmit
      
    - name: Run tests
      working-directory: frontend
      run: npm run test || echo "No tests configured yet"
      
    - name: Build
      working-directory: frontend
      env:
        NEXT_PUBLIC_BACKEND_URL: https://api.tenderpulse.eu
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_dummy
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_dummy
      run: npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-backend, lint-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/Dockerfile
        push: true
        tags: |
          tenderpulse/api:latest
          tenderpulse/api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max